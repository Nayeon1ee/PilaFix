<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="AdminLoginDAO">
	<resultMap type="admin" id="adminloginResult">
		<id property="adCode" column="AD_CODE"/>
		<result property="adName" column="AD_NAME" />
		<result property="adContact1" column="AD_CONTACT1" />
		<result property="adContact2" column="AD_CONTACT2" />
		<result property="adContact3" column="AD_CONTACT3" />
		<result property="adId" column="AD_ID" />
		<result property="adPassword" column="AD_PASSWORD" />
		<result property="accountUsageYn" column="ACCOUNT_USAGE_YN" />
		<result property="roleCode" column="ROLE_CODE" />
		
		<result property="memberCount" column="member_count" />
		<result property="trainerCount" column="trainer_count" />
		<result property="centerCount" column="center_count" />
		<result property="memberCountCumulated" column="member_count_cumulated" />
		<result property="trainerCountCumulated" column="trainer_count_cumulated" />
		<result property="centerCountCumulated" column="center_count_cumulated" />
	</resultMap>


	
	<!-- 로그인 하기 위해 이메일로 비밀번호 가져오기 -->
	<select id="getPasswordByAdId" resultType="java.lang.String">
	    SELECT AD_PASSWORD FROM TBL_ADMIN WHERE AD_ID=#{adId}
	</select>
	
	<!-- 관리자 필요한 기본 정보 조회 -->
	<select id="getLoginInfoA" resultMap="adminloginResult">
	    SELECT AD_CODE, AD_NAME
	    FROM TBL_ADMIN 
	    WHERE AD_ID = #{adId}
	</select>
	
	<!-- 관리자 전체 정보 -->
	<select id="getAdminLoginInfo" resultMap="adminloginResult">
		SELECT * FROM TBL_ADMIN WHERE AD_CODE=#{adCode}
	</select>
	
	<!-- 비밀번호 변경 -->
	<update id="updatePasswordAdmin">
        UPDATE TBL_ADMIN SET AD_PASSWORD = #{newPassword} WHERE AD_CODE = #{adCode}
    </update>
	
	
	<!-- 비밀번호 체크 -->
	<select id="adPasswordCheck" resultType="int">
		SELECT COUNT(*) FROM TBL_ADMIN WHERE AD_PASSWORD=#{adPassword}
	</select>

	<insert id="insertAdminRegister" parameterType="admin">
		INSERT INTO TBL_ADMIN(AD_CODE, AD_NAME, AD_CONTACT1, AD_CONTACT2, AD_CONTACT3, AD_ID, AD_PASSWORD, ACCOUNT_USAGE_YN, ROLE_CODE)
		VALUES(CONCAT('AD', NEXTVAL('SEQ_ADMIN_LOGIN')), #{adName}, #{adContact1}, #{adContact2}, #{adContact3}, #{adId}, #{adPassword} ,'t', 'AD')
	</insert>
	
	<select id="adIdCheck" resultType="int">
		SELECT COUNT(*) FROM TBL_ADMIN WHERE AD_ID=#{adId}
	</select>
	
	<!-- 전체 회원,강사 수 /센터수 (현재&누적)-->
	<select id="getTotalMemberCount" resultMap="adminloginResult">
		SELECT
		    (SELECT COUNT(*) FROM tbl_cst WHERE cs_role_code = 'ME' AND cs_delete_yn='n') AS member_count,
		    (SELECT COUNT(*) FROM tbl_cst WHERE cs_role_code = 'TR' AND cs_delete_yn='n') AS trainer_count,
		    (SELECT COUNT(*) FROM tbl_center WHERE contract_revoke_yn='n' AND contract_expiry_yn='n') AS center_count,
		    (SELECT COUNT(*) FROM tbl_cst WHERE cs_role_code = 'ME') AS member_count_cumulated,
		    (SELECT COUNT(*) FROM tbl_cst WHERE cs_role_code = 'TR') AS trainer_count_cumulated,
		    (SELECT COUNT(*) FROM tbl_center) AS center_count_cumulated;
	
	</select>
	
	<!-- 통계 : 월별 센터 계약 건수 세오기-->
	<select id="getMonthlyContractCount" resultType="int">
		SELECT
		    COALESCE(COUNT(c.CT_CODE), 0) AS contract_count
		FROM
		    generate_series(1, 12) m(month)
		LEFT JOIN
		    TBL_CENTER c ON EXTRACT(MONTH FROM c.contract_start_date) = m.month
		WHERE
		    EXTRACT(YEAR FROM CURRENT_DATE) = EXTRACT(YEAR FROM COALESCE(c.contract_start_date, CURRENT_DATE))
		GROUP BY
		    m.month
		ORDER BY
		    m.month;
		    
	</select>
	<!-- 계약 해지된 센터 수 세오기 (1월부터 12까지 갯수 세옴)-->
	<select id="getMonthlyRevokeCount" resultType="int">
			SELECT
		    COALESCE(COUNT(c.CT_CODE), 0) AS registration_count
		FROM
		    generate_series(1, 12) m(month)
		LEFT JOIN
		    TBL_CENTER c ON EXTRACT(MONTH FROM c.contract_start_date) = m.month
		    AND c.contract_revoke_yn = 't'
		WHERE
		    EXTRACT(YEAR FROM CURRENT_DATE) = EXTRACT(YEAR FROM COALESCE(c.contract_start_date, CURRENT_DATE))
		GROUP BY
		    m.month
		ORDER BY
		    m.month;
		    
	</select>


</mapper>